// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"comment/app/job/internal/biz"
	"comment/app/job/internal/conf"
	"comment/app/job/internal/data"
	"comment/app/job/internal/server"
	"comment/app/job/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	client := data.NewCacheClient(confData, logger)
	dataData, cleanup, err := data.NewData(confData, logger, client)
	if err != nil {
		return nil, nil, err
	}
	commentSubjectRepo := data.NewCommentSubjectRepo(dataData, logger)
	commentSubjectUsecase := biz.NewCommentSubjectUsecase(commentSubjectRepo, logger)
	commentIndexRepo := data.NewCommentIndexRepo(dataData, logger)
	commentIndexCache := data.NewCommentIndexCache(dataData, logger)
	commentIndexUsecase := biz.NewCommentIndexUsecase(commentIndexRepo, commentIndexCache, logger)
	commentContentRepo := data.NewCommentContentRepo(dataData, logger)
	commentContentCache := data.NewCommentContentCache(dataData, logger)
	commentContentUsecase := biz.NewCommentContentUsecase(commentContentRepo, commentContentCache, logger)
	transaction := data.NewTransaction(dataData)
	transactionUsecase := biz.NewTransactionUsecase(commentContentRepo, commentIndexRepo, commentSubjectRepo, transaction, logger)
	commentJobService := service.NewCommentJobService(commentSubjectUsecase, commentIndexUsecase, commentContentUsecase, transactionUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, commentJobService, logger)
	kafkaServer := server.NewKafkaServer(confServer, logger, commentJobService)
	app := newApp(logger, grpcServer, kafkaServer)
	return app, func() {
		cleanup()
	}, nil
}
