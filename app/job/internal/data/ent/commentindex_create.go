// Code generated by entc, DO NOT EDIT.

package ent

import (
	"comment/app/job/internal/data/ent/commentindex"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentIndexCreate is the builder for creating a CommentIndex entity.
type CommentIndexCreate struct {
	config
	mutation *CommentIndexMutation
	hooks    []Hook
}

// SetContentID sets the "content_id" field.
func (cic *CommentIndexCreate) SetContentID(i int64) *CommentIndexCreate {
	cic.mutation.SetContentID(i)
	return cic
}

// SetObjID sets the "obj_id" field.
func (cic *CommentIndexCreate) SetObjID(i int64) *CommentIndexCreate {
	cic.mutation.SetObjID(i)
	return cic
}

// SetOwnerID sets the "owner_id" field.
func (cic *CommentIndexCreate) SetOwnerID(i int64) *CommentIndexCreate {
	cic.mutation.SetOwnerID(i)
	return cic
}

// SetRoot sets the "root" field.
func (cic *CommentIndexCreate) SetRoot(i int64) *CommentIndexCreate {
	cic.mutation.SetRoot(i)
	return cic
}

// SetParent sets the "parent" field.
func (cic *CommentIndexCreate) SetParent(i int64) *CommentIndexCreate {
	cic.mutation.SetParent(i)
	return cic
}

// SetFloor sets the "floor" field.
func (cic *CommentIndexCreate) SetFloor(i int32) *CommentIndexCreate {
	cic.mutation.SetFloor(i)
	return cic
}

// SetLike sets the "like" field.
func (cic *CommentIndexCreate) SetLike(i int32) *CommentIndexCreate {
	cic.mutation.SetLike(i)
	return cic
}

// SetNillableLike sets the "like" field if the given value is not nil.
func (cic *CommentIndexCreate) SetNillableLike(i *int32) *CommentIndexCreate {
	if i != nil {
		cic.SetLike(*i)
	}
	return cic
}

// SetHate sets the "hate" field.
func (cic *CommentIndexCreate) SetHate(i int32) *CommentIndexCreate {
	cic.mutation.SetHate(i)
	return cic
}

// SetNillableHate sets the "hate" field if the given value is not nil.
func (cic *CommentIndexCreate) SetNillableHate(i *int32) *CommentIndexCreate {
	if i != nil {
		cic.SetHate(*i)
	}
	return cic
}

// SetState sets the "state" field.
func (cic *CommentIndexCreate) SetState(i int8) *CommentIndexCreate {
	cic.mutation.SetState(i)
	return cic
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cic *CommentIndexCreate) SetNillableState(i *int8) *CommentIndexCreate {
	if i != nil {
		cic.SetState(*i)
	}
	return cic
}

// SetCreatedAt sets the "created_at" field.
func (cic *CommentIndexCreate) SetCreatedAt(t time.Time) *CommentIndexCreate {
	cic.mutation.SetCreatedAt(t)
	return cic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cic *CommentIndexCreate) SetNillableCreatedAt(t *time.Time) *CommentIndexCreate {
	if t != nil {
		cic.SetCreatedAt(*t)
	}
	return cic
}

// SetUpdatedAt sets the "updated_at" field.
func (cic *CommentIndexCreate) SetUpdatedAt(t time.Time) *CommentIndexCreate {
	cic.mutation.SetUpdatedAt(t)
	return cic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cic *CommentIndexCreate) SetNillableUpdatedAt(t *time.Time) *CommentIndexCreate {
	if t != nil {
		cic.SetUpdatedAt(*t)
	}
	return cic
}

// SetNextFloor sets the "next_floor" field.
func (cic *CommentIndexCreate) SetNextFloor(i int32) *CommentIndexCreate {
	cic.mutation.SetNextFloor(i)
	return cic
}

// SetNillableNextFloor sets the "next_floor" field if the given value is not nil.
func (cic *CommentIndexCreate) SetNillableNextFloor(i *int32) *CommentIndexCreate {
	if i != nil {
		cic.SetNextFloor(*i)
	}
	return cic
}

// SetCount sets the "count" field.
func (cic *CommentIndexCreate) SetCount(i int32) *CommentIndexCreate {
	cic.mutation.SetCount(i)
	return cic
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (cic *CommentIndexCreate) SetNillableCount(i *int32) *CommentIndexCreate {
	if i != nil {
		cic.SetCount(*i)
	}
	return cic
}

// SetID sets the "id" field.
func (cic *CommentIndexCreate) SetID(i int64) *CommentIndexCreate {
	cic.mutation.SetID(i)
	return cic
}

// Mutation returns the CommentIndexMutation object of the builder.
func (cic *CommentIndexCreate) Mutation() *CommentIndexMutation {
	return cic.mutation
}

// Save creates the CommentIndex in the database.
func (cic *CommentIndexCreate) Save(ctx context.Context) (*CommentIndex, error) {
	var (
		err  error
		node *CommentIndex
	)
	cic.defaults()
	if len(cic.hooks) == 0 {
		if err = cic.check(); err != nil {
			return nil, err
		}
		node, err = cic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommentIndexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cic.check(); err != nil {
				return nil, err
			}
			cic.mutation = mutation
			if node, err = cic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cic.hooks) - 1; i >= 0; i-- {
			if cic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CommentIndexCreate) SaveX(ctx context.Context) *CommentIndex {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *CommentIndexCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *CommentIndexCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cic *CommentIndexCreate) defaults() {
	if _, ok := cic.mutation.Like(); !ok {
		v := commentindex.DefaultLike
		cic.mutation.SetLike(v)
	}
	if _, ok := cic.mutation.Hate(); !ok {
		v := commentindex.DefaultHate
		cic.mutation.SetHate(v)
	}
	if _, ok := cic.mutation.State(); !ok {
		v := commentindex.DefaultState
		cic.mutation.SetState(v)
	}
	if _, ok := cic.mutation.CreatedAt(); !ok {
		v := commentindex.DefaultCreatedAt()
		cic.mutation.SetCreatedAt(v)
	}
	if _, ok := cic.mutation.Count(); !ok {
		v := commentindex.DefaultCount
		cic.mutation.SetCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *CommentIndexCreate) check() error {
	if _, ok := cic.mutation.ContentID(); !ok {
		return &ValidationError{Name: "content_id", err: errors.New(`ent: missing required field "content_id"`)}
	}
	if _, ok := cic.mutation.ObjID(); !ok {
		return &ValidationError{Name: "obj_id", err: errors.New(`ent: missing required field "obj_id"`)}
	}
	if _, ok := cic.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "owner_id"`)}
	}
	if _, ok := cic.mutation.Root(); !ok {
		return &ValidationError{Name: "root", err: errors.New(`ent: missing required field "root"`)}
	}
	if _, ok := cic.mutation.Parent(); !ok {
		return &ValidationError{Name: "parent", err: errors.New(`ent: missing required field "parent"`)}
	}
	if _, ok := cic.mutation.Floor(); !ok {
		return &ValidationError{Name: "floor", err: errors.New(`ent: missing required field "floor"`)}
	}
	if _, ok := cic.mutation.Like(); !ok {
		return &ValidationError{Name: "like", err: errors.New(`ent: missing required field "like"`)}
	}
	if _, ok := cic.mutation.Hate(); !ok {
		return &ValidationError{Name: "hate", err: errors.New(`ent: missing required field "hate"`)}
	}
	if _, ok := cic.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "state"`)}
	}
	if _, ok := cic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := cic.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "count"`)}
	}
	return nil
}

func (cic *CommentIndexCreate) sqlSave(ctx context.Context) (*CommentIndex, error) {
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (cic *CommentIndexCreate) createSpec() (*CommentIndex, *sqlgraph.CreateSpec) {
	var (
		_node = &CommentIndex{config: cic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: commentindex.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: commentindex.FieldID,
			},
		}
	)
	if id, ok := cic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cic.mutation.ContentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldContentID,
		})
		_node.ContentID = value
	}
	if value, ok := cic.mutation.ObjID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldObjID,
		})
		_node.ObjID = value
	}
	if value, ok := cic.mutation.OwnerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldOwnerID,
		})
		_node.OwnerID = value
	}
	if value, ok := cic.mutation.Root(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldRoot,
		})
		_node.Root = value
	}
	if value, ok := cic.mutation.Parent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldParent,
		})
		_node.Parent = value
	}
	if value, ok := cic.mutation.Floor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldFloor,
		})
		_node.Floor = value
	}
	if value, ok := cic.mutation.Like(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldLike,
		})
		_node.Like = value
	}
	if value, ok := cic.mutation.Hate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldHate,
		})
		_node.Hate = value
	}
	if value, ok := cic.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: commentindex.FieldState,
		})
		_node.State = value
	}
	if value, ok := cic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentindex.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentindex.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cic.mutation.NextFloor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldNextFloor,
		})
		_node.NextFloor = value
	}
	if value, ok := cic.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldCount,
		})
		_node.Count = value
	}
	return _node, _spec
}

// CommentIndexCreateBulk is the builder for creating many CommentIndex entities in bulk.
type CommentIndexCreateBulk struct {
	config
	builders []*CommentIndexCreate
}

// Save creates the CommentIndex entities in the database.
func (cicb *CommentIndexCreateBulk) Save(ctx context.Context) ([]*CommentIndex, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CommentIndex, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentIndexMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *CommentIndexCreateBulk) SaveX(ctx context.Context) []*CommentIndex {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *CommentIndexCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *CommentIndexCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
