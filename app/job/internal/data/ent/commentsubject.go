// Code generated by entc, DO NOT EDIT.

package ent

import (
	"comment/app/job/internal/data/ent/commentsubject"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CommentSubject is the model entity for the CommentSubject schema.
type CommentSubject struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	// 作者
	OwnerID int64 `json:"owner_id,omitempty"`
	// Count holds the value of the "count" field.
	// 评论数
	Count int32 `json:"count,omitempty"`
	// NextFloor holds the value of the "next_floor" field.
	// 下一个楼层数
	NextFloor int32 `json:"next_floor,omitempty"`
	// State holds the value of the "state" field.
	// 状态,1为隐藏,0为正常
	State int8 `json:"state,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	// 修改时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommentSubject) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case commentsubject.FieldID, commentsubject.FieldOwnerID, commentsubject.FieldCount, commentsubject.FieldNextFloor, commentsubject.FieldState:
			values[i] = new(sql.NullInt64)
		case commentsubject.FieldCreatedAt, commentsubject.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CommentSubject", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommentSubject fields.
func (cs *CommentSubject) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commentsubject.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int64(value.Int64)
		case commentsubject.FieldOwnerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				cs.OwnerID = value.Int64
			}
		case commentsubject.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				cs.Count = int32(value.Int64)
			}
		case commentsubject.FieldNextFloor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field next_floor", values[i])
			} else if value.Valid {
				cs.NextFloor = int32(value.Int64)
			}
		case commentsubject.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				cs.State = int8(value.Int64)
			}
		case commentsubject.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cs.CreatedAt = value.Time
			}
		case commentsubject.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cs.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CommentSubject.
// Note that you need to call CommentSubject.Unwrap() before calling this method if this CommentSubject
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CommentSubject) Update() *CommentSubjectUpdateOne {
	return (&CommentSubjectClient{config: cs.config}).UpdateOne(cs)
}

// Unwrap unwraps the CommentSubject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CommentSubject) Unwrap() *CommentSubject {
	tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommentSubject is not a transactional entity")
	}
	cs.config.driver = tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CommentSubject) String() string {
	var builder strings.Builder
	builder.WriteString("CommentSubject(")
	builder.WriteString(fmt.Sprintf("id=%v", cs.ID))
	builder.WriteString(", owner_id=")
	builder.WriteString(fmt.Sprintf("%v", cs.OwnerID))
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", cs.Count))
	builder.WriteString(", next_floor=")
	builder.WriteString(fmt.Sprintf("%v", cs.NextFloor))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", cs.State))
	builder.WriteString(", created_at=")
	builder.WriteString(cs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(cs.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CommentSubjects is a parsable slice of CommentSubject.
type CommentSubjects []*CommentSubject

func (cs CommentSubjects) config(cfg config) {
	for _i := range cs {
		cs[_i].config = cfg
	}
}
