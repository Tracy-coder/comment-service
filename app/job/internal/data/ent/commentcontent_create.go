// Code generated by entc, DO NOT EDIT.

package ent

import (
	"comment/app/job/internal/data/ent/commentcontent"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentContentCreate is the builder for creating a CommentContent entity.
type CommentContentCreate struct {
	config
	mutation *CommentContentMutation
	hooks    []Hook
}

// SetObjID sets the "obj_id" field.
func (ccc *CommentContentCreate) SetObjID(i int64) *CommentContentCreate {
	ccc.mutation.SetObjID(i)
	return ccc
}

// SetOwnerID sets the "owner_id" field.
func (ccc *CommentContentCreate) SetOwnerID(i int64) *CommentContentCreate {
	ccc.mutation.SetOwnerID(i)
	return ccc
}

// SetRoot sets the "root" field.
func (ccc *CommentContentCreate) SetRoot(i int64) *CommentContentCreate {
	ccc.mutation.SetRoot(i)
	return ccc
}

// SetFloor sets the "floor" field.
func (ccc *CommentContentCreate) SetFloor(i int32) *CommentContentCreate {
	ccc.mutation.SetFloor(i)
	return ccc
}

// SetMessage sets the "message" field.
func (ccc *CommentContentCreate) SetMessage(s string) *CommentContentCreate {
	ccc.mutation.SetMessage(s)
	return ccc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (ccc *CommentContentCreate) SetNillableMessage(s *string) *CommentContentCreate {
	if s != nil {
		ccc.SetMessage(*s)
	}
	return ccc
}

// SetCreatedAt sets the "created_at" field.
func (ccc *CommentContentCreate) SetCreatedAt(t time.Time) *CommentContentCreate {
	ccc.mutation.SetCreatedAt(t)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *CommentContentCreate) SetNillableCreatedAt(t *time.Time) *CommentContentCreate {
	if t != nil {
		ccc.SetCreatedAt(*t)
	}
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *CommentContentCreate) SetUpdatedAt(t time.Time) *CommentContentCreate {
	ccc.mutation.SetUpdatedAt(t)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *CommentContentCreate) SetNillableUpdatedAt(t *time.Time) *CommentContentCreate {
	if t != nil {
		ccc.SetUpdatedAt(*t)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CommentContentCreate) SetID(i int64) *CommentContentCreate {
	ccc.mutation.SetID(i)
	return ccc
}

// Mutation returns the CommentContentMutation object of the builder.
func (ccc *CommentContentCreate) Mutation() *CommentContentMutation {
	return ccc.mutation
}

// Save creates the CommentContent in the database.
func (ccc *CommentContentCreate) Save(ctx context.Context) (*CommentContent, error) {
	var (
		err  error
		node *CommentContent
	)
	ccc.defaults()
	if len(ccc.hooks) == 0 {
		if err = ccc.check(); err != nil {
			return nil, err
		}
		node, err = ccc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommentContentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccc.check(); err != nil {
				return nil, err
			}
			ccc.mutation = mutation
			if node, err = ccc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ccc.hooks) - 1; i >= 0; i-- {
			if ccc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CommentContentCreate) SaveX(ctx context.Context) *CommentContent {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CommentContentCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CommentContentCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CommentContentCreate) defaults() {
	if _, ok := ccc.mutation.Message(); !ok {
		v := commentcontent.DefaultMessage
		ccc.mutation.SetMessage(v)
	}
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		v := commentcontent.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CommentContentCreate) check() error {
	if _, ok := ccc.mutation.ObjID(); !ok {
		return &ValidationError{Name: "obj_id", err: errors.New(`ent: missing required field "obj_id"`)}
	}
	if _, ok := ccc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "owner_id"`)}
	}
	if _, ok := ccc.mutation.Root(); !ok {
		return &ValidationError{Name: "root", err: errors.New(`ent: missing required field "root"`)}
	}
	if _, ok := ccc.mutation.Floor(); !ok {
		return &ValidationError{Name: "floor", err: errors.New(`ent: missing required field "floor"`)}
	}
	if _, ok := ccc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "message"`)}
	}
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	return nil
}

func (ccc *CommentContentCreate) sqlSave(ctx context.Context) (*CommentContent, error) {
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ccc *CommentContentCreate) createSpec() (*CommentContent, *sqlgraph.CreateSpec) {
	var (
		_node = &CommentContent{config: ccc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: commentcontent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: commentcontent.FieldID,
			},
		}
	)
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.ObjID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentcontent.FieldObjID,
		})
		_node.ObjID = value
	}
	if value, ok := ccc.mutation.OwnerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentcontent.FieldOwnerID,
		})
		_node.OwnerID = value
	}
	if value, ok := ccc.mutation.Root(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentcontent.FieldRoot,
		})
		_node.Root = value
	}
	if value, ok := ccc.mutation.Floor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentcontent.FieldFloor,
		})
		_node.Floor = value
	}
	if value, ok := ccc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: commentcontent.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentcontent.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentcontent.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CommentContentCreateBulk is the builder for creating many CommentContent entities in bulk.
type CommentContentCreateBulk struct {
	config
	builders []*CommentContentCreate
}

// Save creates the CommentContent entities in the database.
func (cccb *CommentContentCreateBulk) Save(ctx context.Context) ([]*CommentContent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CommentContent, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentContentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CommentContentCreateBulk) SaveX(ctx context.Context) []*CommentContent {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CommentContentCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CommentContentCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}
