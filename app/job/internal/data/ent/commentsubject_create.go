// Code generated by entc, DO NOT EDIT.

package ent

import (
	"comment/app/job/internal/data/ent/commentsubject"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentSubjectCreate is the builder for creating a CommentSubject entity.
type CommentSubjectCreate struct {
	config
	mutation *CommentSubjectMutation
	hooks    []Hook
}

// SetOwnerID sets the "owner_id" field.
func (csc *CommentSubjectCreate) SetOwnerID(i int64) *CommentSubjectCreate {
	csc.mutation.SetOwnerID(i)
	return csc
}

// SetCount sets the "count" field.
func (csc *CommentSubjectCreate) SetCount(i int32) *CommentSubjectCreate {
	csc.mutation.SetCount(i)
	return csc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (csc *CommentSubjectCreate) SetNillableCount(i *int32) *CommentSubjectCreate {
	if i != nil {
		csc.SetCount(*i)
	}
	return csc
}

// SetNextFloor sets the "next_floor" field.
func (csc *CommentSubjectCreate) SetNextFloor(i int32) *CommentSubjectCreate {
	csc.mutation.SetNextFloor(i)
	return csc
}

// SetNillableNextFloor sets the "next_floor" field if the given value is not nil.
func (csc *CommentSubjectCreate) SetNillableNextFloor(i *int32) *CommentSubjectCreate {
	if i != nil {
		csc.SetNextFloor(*i)
	}
	return csc
}

// SetState sets the "state" field.
func (csc *CommentSubjectCreate) SetState(i int8) *CommentSubjectCreate {
	csc.mutation.SetState(i)
	return csc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (csc *CommentSubjectCreate) SetNillableState(i *int8) *CommentSubjectCreate {
	if i != nil {
		csc.SetState(*i)
	}
	return csc
}

// SetCreatedAt sets the "created_at" field.
func (csc *CommentSubjectCreate) SetCreatedAt(t time.Time) *CommentSubjectCreate {
	csc.mutation.SetCreatedAt(t)
	return csc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csc *CommentSubjectCreate) SetNillableCreatedAt(t *time.Time) *CommentSubjectCreate {
	if t != nil {
		csc.SetCreatedAt(*t)
	}
	return csc
}

// SetUpdatedAt sets the "updated_at" field.
func (csc *CommentSubjectCreate) SetUpdatedAt(t time.Time) *CommentSubjectCreate {
	csc.mutation.SetUpdatedAt(t)
	return csc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csc *CommentSubjectCreate) SetNillableUpdatedAt(t *time.Time) *CommentSubjectCreate {
	if t != nil {
		csc.SetUpdatedAt(*t)
	}
	return csc
}

// SetID sets the "id" field.
func (csc *CommentSubjectCreate) SetID(i int64) *CommentSubjectCreate {
	csc.mutation.SetID(i)
	return csc
}

// Mutation returns the CommentSubjectMutation object of the builder.
func (csc *CommentSubjectCreate) Mutation() *CommentSubjectMutation {
	return csc.mutation
}

// Save creates the CommentSubject in the database.
func (csc *CommentSubjectCreate) Save(ctx context.Context) (*CommentSubject, error) {
	var (
		err  error
		node *CommentSubject
	)
	csc.defaults()
	if len(csc.hooks) == 0 {
		if err = csc.check(); err != nil {
			return nil, err
		}
		node, err = csc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommentSubjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = csc.check(); err != nil {
				return nil, err
			}
			csc.mutation = mutation
			if node, err = csc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(csc.hooks) - 1; i >= 0; i-- {
			if csc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CommentSubjectCreate) SaveX(ctx context.Context) *CommentSubject {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CommentSubjectCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CommentSubjectCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *CommentSubjectCreate) defaults() {
	if _, ok := csc.mutation.Count(); !ok {
		v := commentsubject.DefaultCount
		csc.mutation.SetCount(v)
	}
	if _, ok := csc.mutation.NextFloor(); !ok {
		v := commentsubject.DefaultNextFloor
		csc.mutation.SetNextFloor(v)
	}
	if _, ok := csc.mutation.State(); !ok {
		v := commentsubject.DefaultState
		csc.mutation.SetState(v)
	}
	if _, ok := csc.mutation.CreatedAt(); !ok {
		v := commentsubject.DefaultCreatedAt()
		csc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CommentSubjectCreate) check() error {
	if _, ok := csc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "owner_id"`)}
	}
	if _, ok := csc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "count"`)}
	}
	if _, ok := csc.mutation.NextFloor(); !ok {
		return &ValidationError{Name: "next_floor", err: errors.New(`ent: missing required field "next_floor"`)}
	}
	if _, ok := csc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "state"`)}
	}
	if _, ok := csc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	return nil
}

func (csc *CommentSubjectCreate) sqlSave(ctx context.Context) (*CommentSubject, error) {
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (csc *CommentSubjectCreate) createSpec() (*CommentSubject, *sqlgraph.CreateSpec) {
	var (
		_node = &CommentSubject{config: csc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: commentsubject.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: commentsubject.FieldID,
			},
		}
	)
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := csc.mutation.OwnerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentsubject.FieldOwnerID,
		})
		_node.OwnerID = value
	}
	if value, ok := csc.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentsubject.FieldCount,
		})
		_node.Count = value
	}
	if value, ok := csc.mutation.NextFloor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentsubject.FieldNextFloor,
		})
		_node.NextFloor = value
	}
	if value, ok := csc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: commentsubject.FieldState,
		})
		_node.State = value
	}
	if value, ok := csc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentsubject.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := csc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentsubject.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CommentSubjectCreateBulk is the builder for creating many CommentSubject entities in bulk.
type CommentSubjectCreateBulk struct {
	config
	builders []*CommentSubjectCreate
}

// Save creates the CommentSubject entities in the database.
func (cscb *CommentSubjectCreateBulk) Save(ctx context.Context) ([]*CommentSubject, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CommentSubject, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentSubjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CommentSubjectCreateBulk) SaveX(ctx context.Context) []*CommentSubject {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CommentSubjectCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CommentSubjectCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
