// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"comment/app/job/internal/data/ent/migrate"

	"comment/app/job/internal/data/ent/commentcontent"
	"comment/app/job/internal/data/ent/commentindex"
	"comment/app/job/internal/data/ent/commentsubject"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CommentContent is the client for interacting with the CommentContent builders.
	CommentContent *CommentContentClient
	// CommentIndex is the client for interacting with the CommentIndex builders.
	CommentIndex *CommentIndexClient
	// CommentSubject is the client for interacting with the CommentSubject builders.
	CommentSubject *CommentSubjectClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CommentContent = NewCommentContentClient(c.config)
	c.CommentIndex = NewCommentIndexClient(c.config)
	c.CommentSubject = NewCommentSubjectClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		CommentContent: NewCommentContentClient(cfg),
		CommentIndex:   NewCommentIndexClient(cfg),
		CommentSubject: NewCommentSubjectClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:         cfg,
		CommentContent: NewCommentContentClient(cfg),
		CommentIndex:   NewCommentIndexClient(cfg),
		CommentSubject: NewCommentSubjectClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CommentContent.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CommentContent.Use(hooks...)
	c.CommentIndex.Use(hooks...)
	c.CommentSubject.Use(hooks...)
}

// CommentContentClient is a client for the CommentContent schema.
type CommentContentClient struct {
	config
}

// NewCommentContentClient returns a client for the CommentContent from the given config.
func NewCommentContentClient(c config) *CommentContentClient {
	return &CommentContentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commentcontent.Hooks(f(g(h())))`.
func (c *CommentContentClient) Use(hooks ...Hook) {
	c.hooks.CommentContent = append(c.hooks.CommentContent, hooks...)
}

// Create returns a create builder for CommentContent.
func (c *CommentContentClient) Create() *CommentContentCreate {
	mutation := newCommentContentMutation(c.config, OpCreate)
	return &CommentContentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommentContent entities.
func (c *CommentContentClient) CreateBulk(builders ...*CommentContentCreate) *CommentContentCreateBulk {
	return &CommentContentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommentContent.
func (c *CommentContentClient) Update() *CommentContentUpdate {
	mutation := newCommentContentMutation(c.config, OpUpdate)
	return &CommentContentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentContentClient) UpdateOne(cc *CommentContent) *CommentContentUpdateOne {
	mutation := newCommentContentMutation(c.config, OpUpdateOne, withCommentContent(cc))
	return &CommentContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentContentClient) UpdateOneID(id int64) *CommentContentUpdateOne {
	mutation := newCommentContentMutation(c.config, OpUpdateOne, withCommentContentID(id))
	return &CommentContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommentContent.
func (c *CommentContentClient) Delete() *CommentContentDelete {
	mutation := newCommentContentMutation(c.config, OpDelete)
	return &CommentContentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommentContentClient) DeleteOne(cc *CommentContent) *CommentContentDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommentContentClient) DeleteOneID(id int64) *CommentContentDeleteOne {
	builder := c.Delete().Where(commentcontent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentContentDeleteOne{builder}
}

// Query returns a query builder for CommentContent.
func (c *CommentContentClient) Query() *CommentContentQuery {
	return &CommentContentQuery{
		config: c.config,
	}
}

// Get returns a CommentContent entity by its id.
func (c *CommentContentClient) Get(ctx context.Context, id int64) (*CommentContent, error) {
	return c.Query().Where(commentcontent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentContentClient) GetX(ctx context.Context, id int64) *CommentContent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommentContentClient) Hooks() []Hook {
	return c.hooks.CommentContent
}

// CommentIndexClient is a client for the CommentIndex schema.
type CommentIndexClient struct {
	config
}

// NewCommentIndexClient returns a client for the CommentIndex from the given config.
func NewCommentIndexClient(c config) *CommentIndexClient {
	return &CommentIndexClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commentindex.Hooks(f(g(h())))`.
func (c *CommentIndexClient) Use(hooks ...Hook) {
	c.hooks.CommentIndex = append(c.hooks.CommentIndex, hooks...)
}

// Create returns a create builder for CommentIndex.
func (c *CommentIndexClient) Create() *CommentIndexCreate {
	mutation := newCommentIndexMutation(c.config, OpCreate)
	return &CommentIndexCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommentIndex entities.
func (c *CommentIndexClient) CreateBulk(builders ...*CommentIndexCreate) *CommentIndexCreateBulk {
	return &CommentIndexCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommentIndex.
func (c *CommentIndexClient) Update() *CommentIndexUpdate {
	mutation := newCommentIndexMutation(c.config, OpUpdate)
	return &CommentIndexUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentIndexClient) UpdateOne(ci *CommentIndex) *CommentIndexUpdateOne {
	mutation := newCommentIndexMutation(c.config, OpUpdateOne, withCommentIndex(ci))
	return &CommentIndexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentIndexClient) UpdateOneID(id int64) *CommentIndexUpdateOne {
	mutation := newCommentIndexMutation(c.config, OpUpdateOne, withCommentIndexID(id))
	return &CommentIndexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommentIndex.
func (c *CommentIndexClient) Delete() *CommentIndexDelete {
	mutation := newCommentIndexMutation(c.config, OpDelete)
	return &CommentIndexDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommentIndexClient) DeleteOne(ci *CommentIndex) *CommentIndexDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommentIndexClient) DeleteOneID(id int64) *CommentIndexDeleteOne {
	builder := c.Delete().Where(commentindex.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentIndexDeleteOne{builder}
}

// Query returns a query builder for CommentIndex.
func (c *CommentIndexClient) Query() *CommentIndexQuery {
	return &CommentIndexQuery{
		config: c.config,
	}
}

// Get returns a CommentIndex entity by its id.
func (c *CommentIndexClient) Get(ctx context.Context, id int64) (*CommentIndex, error) {
	return c.Query().Where(commentindex.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentIndexClient) GetX(ctx context.Context, id int64) *CommentIndex {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommentIndexClient) Hooks() []Hook {
	return c.hooks.CommentIndex
}

// CommentSubjectClient is a client for the CommentSubject schema.
type CommentSubjectClient struct {
	config
}

// NewCommentSubjectClient returns a client for the CommentSubject from the given config.
func NewCommentSubjectClient(c config) *CommentSubjectClient {
	return &CommentSubjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commentsubject.Hooks(f(g(h())))`.
func (c *CommentSubjectClient) Use(hooks ...Hook) {
	c.hooks.CommentSubject = append(c.hooks.CommentSubject, hooks...)
}

// Create returns a create builder for CommentSubject.
func (c *CommentSubjectClient) Create() *CommentSubjectCreate {
	mutation := newCommentSubjectMutation(c.config, OpCreate)
	return &CommentSubjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommentSubject entities.
func (c *CommentSubjectClient) CreateBulk(builders ...*CommentSubjectCreate) *CommentSubjectCreateBulk {
	return &CommentSubjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommentSubject.
func (c *CommentSubjectClient) Update() *CommentSubjectUpdate {
	mutation := newCommentSubjectMutation(c.config, OpUpdate)
	return &CommentSubjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentSubjectClient) UpdateOne(cs *CommentSubject) *CommentSubjectUpdateOne {
	mutation := newCommentSubjectMutation(c.config, OpUpdateOne, withCommentSubject(cs))
	return &CommentSubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentSubjectClient) UpdateOneID(id int64) *CommentSubjectUpdateOne {
	mutation := newCommentSubjectMutation(c.config, OpUpdateOne, withCommentSubjectID(id))
	return &CommentSubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommentSubject.
func (c *CommentSubjectClient) Delete() *CommentSubjectDelete {
	mutation := newCommentSubjectMutation(c.config, OpDelete)
	return &CommentSubjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommentSubjectClient) DeleteOne(cs *CommentSubject) *CommentSubjectDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommentSubjectClient) DeleteOneID(id int64) *CommentSubjectDeleteOne {
	builder := c.Delete().Where(commentsubject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentSubjectDeleteOne{builder}
}

// Query returns a query builder for CommentSubject.
func (c *CommentSubjectClient) Query() *CommentSubjectQuery {
	return &CommentSubjectQuery{
		config: c.config,
	}
}

// Get returns a CommentSubject entity by its id.
func (c *CommentSubjectClient) Get(ctx context.Context, id int64) (*CommentSubject, error) {
	return c.Query().Where(commentsubject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentSubjectClient) GetX(ctx context.Context, id int64) *CommentSubject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommentSubjectClient) Hooks() []Hook {
	return c.hooks.CommentSubject
}
