// Code generated by entc, DO NOT EDIT.

package commentcontent

import (
	"comment/app/job/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ObjID applies equality check predicate on the "obj_id" field. It's identical to ObjIDEQ.
func ObjID(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjID), v))
	})
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerID), v))
	})
}

// Root applies equality check predicate on the "root" field. It's identical to RootEQ.
func Root(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoot), v))
	})
}

// Floor applies equality check predicate on the "floor" field. It's identical to FloorEQ.
func Floor(v int32) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFloor), v))
	})
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ObjIDEQ applies the EQ predicate on the "obj_id" field.
func ObjIDEQ(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObjID), v))
	})
}

// ObjIDNEQ applies the NEQ predicate on the "obj_id" field.
func ObjIDNEQ(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldObjID), v))
	})
}

// ObjIDIn applies the In predicate on the "obj_id" field.
func ObjIDIn(vs ...int64) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldObjID), v...))
	})
}

// ObjIDNotIn applies the NotIn predicate on the "obj_id" field.
func ObjIDNotIn(vs ...int64) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldObjID), v...))
	})
}

// ObjIDGT applies the GT predicate on the "obj_id" field.
func ObjIDGT(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldObjID), v))
	})
}

// ObjIDGTE applies the GTE predicate on the "obj_id" field.
func ObjIDGTE(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldObjID), v))
	})
}

// ObjIDLT applies the LT predicate on the "obj_id" field.
func ObjIDLT(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldObjID), v))
	})
}

// ObjIDLTE applies the LTE predicate on the "obj_id" field.
func ObjIDLTE(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldObjID), v))
	})
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerID), v))
	})
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerID), v))
	})
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...int64) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOwnerID), v...))
	})
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...int64) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOwnerID), v...))
	})
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerID), v))
	})
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerID), v))
	})
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerID), v))
	})
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerID), v))
	})
}

// RootEQ applies the EQ predicate on the "root" field.
func RootEQ(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoot), v))
	})
}

// RootNEQ applies the NEQ predicate on the "root" field.
func RootNEQ(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoot), v))
	})
}

// RootIn applies the In predicate on the "root" field.
func RootIn(vs ...int64) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoot), v...))
	})
}

// RootNotIn applies the NotIn predicate on the "root" field.
func RootNotIn(vs ...int64) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoot), v...))
	})
}

// RootGT applies the GT predicate on the "root" field.
func RootGT(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoot), v))
	})
}

// RootGTE applies the GTE predicate on the "root" field.
func RootGTE(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoot), v))
	})
}

// RootLT applies the LT predicate on the "root" field.
func RootLT(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoot), v))
	})
}

// RootLTE applies the LTE predicate on the "root" field.
func RootLTE(v int64) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoot), v))
	})
}

// FloorEQ applies the EQ predicate on the "floor" field.
func FloorEQ(v int32) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFloor), v))
	})
}

// FloorNEQ applies the NEQ predicate on the "floor" field.
func FloorNEQ(v int32) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFloor), v))
	})
}

// FloorIn applies the In predicate on the "floor" field.
func FloorIn(vs ...int32) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFloor), v...))
	})
}

// FloorNotIn applies the NotIn predicate on the "floor" field.
func FloorNotIn(vs ...int32) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFloor), v...))
	})
}

// FloorGT applies the GT predicate on the "floor" field.
func FloorGT(v int32) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFloor), v))
	})
}

// FloorGTE applies the GTE predicate on the "floor" field.
func FloorGTE(v int32) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFloor), v))
	})
}

// FloorLT applies the LT predicate on the "floor" field.
func FloorLT(v int32) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFloor), v))
	})
}

// FloorLTE applies the LTE predicate on the "floor" field.
func FloorLTE(v int32) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFloor), v))
	})
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMessage), v))
	})
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMessage), v...))
	})
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMessage), v...))
	})
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMessage), v))
	})
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMessage), v))
	})
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMessage), v))
	})
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMessage), v))
	})
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMessage), v))
	})
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMessage), v))
	})
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMessage), v))
	})
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMessage), v))
	})
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMessage), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CommentContent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CommentContent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	})
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CommentContent) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CommentContent) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CommentContent) predicate.CommentContent {
	return predicate.CommentContent(func(s *sql.Selector) {
		p(s.Not())
	})
}
