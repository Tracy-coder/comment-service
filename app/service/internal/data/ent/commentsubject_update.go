// Code generated by entc, DO NOT EDIT.

package ent

import (
	"comment/app/service/internal/data/ent/commentsubject"
	"comment/app/service/internal/data/ent/predicate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentSubjectUpdate is the builder for updating CommentSubject entities.
type CommentSubjectUpdate struct {
	config
	hooks    []Hook
	mutation *CommentSubjectMutation
}

// Where appends a list predicates to the CommentSubjectUpdate builder.
func (csu *CommentSubjectUpdate) Where(ps ...predicate.CommentSubject) *CommentSubjectUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetOwnerID sets the "owner_id" field.
func (csu *CommentSubjectUpdate) SetOwnerID(i int64) *CommentSubjectUpdate {
	csu.mutation.ResetOwnerID()
	csu.mutation.SetOwnerID(i)
	return csu
}

// AddOwnerID adds i to the "owner_id" field.
func (csu *CommentSubjectUpdate) AddOwnerID(i int64) *CommentSubjectUpdate {
	csu.mutation.AddOwnerID(i)
	return csu
}

// SetCount sets the "count" field.
func (csu *CommentSubjectUpdate) SetCount(i int32) *CommentSubjectUpdate {
	csu.mutation.ResetCount()
	csu.mutation.SetCount(i)
	return csu
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (csu *CommentSubjectUpdate) SetNillableCount(i *int32) *CommentSubjectUpdate {
	if i != nil {
		csu.SetCount(*i)
	}
	return csu
}

// AddCount adds i to the "count" field.
func (csu *CommentSubjectUpdate) AddCount(i int32) *CommentSubjectUpdate {
	csu.mutation.AddCount(i)
	return csu
}

// SetNextFloor sets the "next_floor" field.
func (csu *CommentSubjectUpdate) SetNextFloor(i int32) *CommentSubjectUpdate {
	csu.mutation.ResetNextFloor()
	csu.mutation.SetNextFloor(i)
	return csu
}

// SetNillableNextFloor sets the "next_floor" field if the given value is not nil.
func (csu *CommentSubjectUpdate) SetNillableNextFloor(i *int32) *CommentSubjectUpdate {
	if i != nil {
		csu.SetNextFloor(*i)
	}
	return csu
}

// AddNextFloor adds i to the "next_floor" field.
func (csu *CommentSubjectUpdate) AddNextFloor(i int32) *CommentSubjectUpdate {
	csu.mutation.AddNextFloor(i)
	return csu
}

// SetState sets the "state" field.
func (csu *CommentSubjectUpdate) SetState(i int8) *CommentSubjectUpdate {
	csu.mutation.ResetState()
	csu.mutation.SetState(i)
	return csu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (csu *CommentSubjectUpdate) SetNillableState(i *int8) *CommentSubjectUpdate {
	if i != nil {
		csu.SetState(*i)
	}
	return csu
}

// AddState adds i to the "state" field.
func (csu *CommentSubjectUpdate) AddState(i int8) *CommentSubjectUpdate {
	csu.mutation.AddState(i)
	return csu
}

// SetCreatedAt sets the "created_at" field.
func (csu *CommentSubjectUpdate) SetCreatedAt(t time.Time) *CommentSubjectUpdate {
	csu.mutation.SetCreatedAt(t)
	return csu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csu *CommentSubjectUpdate) SetNillableCreatedAt(t *time.Time) *CommentSubjectUpdate {
	if t != nil {
		csu.SetCreatedAt(*t)
	}
	return csu
}

// SetUpdatedAt sets the "updated_at" field.
func (csu *CommentSubjectUpdate) SetUpdatedAt(t time.Time) *CommentSubjectUpdate {
	csu.mutation.SetUpdatedAt(t)
	return csu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csu *CommentSubjectUpdate) SetNillableUpdatedAt(t *time.Time) *CommentSubjectUpdate {
	if t != nil {
		csu.SetUpdatedAt(*t)
	}
	return csu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (csu *CommentSubjectUpdate) ClearUpdatedAt() *CommentSubjectUpdate {
	csu.mutation.ClearUpdatedAt()
	return csu
}

// Mutation returns the CommentSubjectMutation object of the builder.
func (csu *CommentSubjectUpdate) Mutation() *CommentSubjectMutation {
	return csu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CommentSubjectUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(csu.hooks) == 0 {
		affected, err = csu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommentSubjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csu.mutation = mutation
			affected, err = csu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(csu.hooks) - 1; i >= 0; i-- {
			if csu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CommentSubjectUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CommentSubjectUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CommentSubjectUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csu *CommentSubjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   commentsubject.Table,
			Columns: commentsubject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: commentsubject.FieldID,
			},
		},
	}
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentsubject.FieldOwnerID,
		})
	}
	if value, ok := csu.mutation.AddedOwnerID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentsubject.FieldOwnerID,
		})
	}
	if value, ok := csu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentsubject.FieldCount,
		})
	}
	if value, ok := csu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentsubject.FieldCount,
		})
	}
	if value, ok := csu.mutation.NextFloor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentsubject.FieldNextFloor,
		})
	}
	if value, ok := csu.mutation.AddedNextFloor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentsubject.FieldNextFloor,
		})
	}
	if value, ok := csu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: commentsubject.FieldState,
		})
	}
	if value, ok := csu.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: commentsubject.FieldState,
		})
	}
	if value, ok := csu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentsubject.FieldCreatedAt,
		})
	}
	if value, ok := csu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentsubject.FieldUpdatedAt,
		})
	}
	if csu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: commentsubject.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentsubject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CommentSubjectUpdateOne is the builder for updating a single CommentSubject entity.
type CommentSubjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentSubjectMutation
}

// SetOwnerID sets the "owner_id" field.
func (csuo *CommentSubjectUpdateOne) SetOwnerID(i int64) *CommentSubjectUpdateOne {
	csuo.mutation.ResetOwnerID()
	csuo.mutation.SetOwnerID(i)
	return csuo
}

// AddOwnerID adds i to the "owner_id" field.
func (csuo *CommentSubjectUpdateOne) AddOwnerID(i int64) *CommentSubjectUpdateOne {
	csuo.mutation.AddOwnerID(i)
	return csuo
}

// SetCount sets the "count" field.
func (csuo *CommentSubjectUpdateOne) SetCount(i int32) *CommentSubjectUpdateOne {
	csuo.mutation.ResetCount()
	csuo.mutation.SetCount(i)
	return csuo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (csuo *CommentSubjectUpdateOne) SetNillableCount(i *int32) *CommentSubjectUpdateOne {
	if i != nil {
		csuo.SetCount(*i)
	}
	return csuo
}

// AddCount adds i to the "count" field.
func (csuo *CommentSubjectUpdateOne) AddCount(i int32) *CommentSubjectUpdateOne {
	csuo.mutation.AddCount(i)
	return csuo
}

// SetNextFloor sets the "next_floor" field.
func (csuo *CommentSubjectUpdateOne) SetNextFloor(i int32) *CommentSubjectUpdateOne {
	csuo.mutation.ResetNextFloor()
	csuo.mutation.SetNextFloor(i)
	return csuo
}

// SetNillableNextFloor sets the "next_floor" field if the given value is not nil.
func (csuo *CommentSubjectUpdateOne) SetNillableNextFloor(i *int32) *CommentSubjectUpdateOne {
	if i != nil {
		csuo.SetNextFloor(*i)
	}
	return csuo
}

// AddNextFloor adds i to the "next_floor" field.
func (csuo *CommentSubjectUpdateOne) AddNextFloor(i int32) *CommentSubjectUpdateOne {
	csuo.mutation.AddNextFloor(i)
	return csuo
}

// SetState sets the "state" field.
func (csuo *CommentSubjectUpdateOne) SetState(i int8) *CommentSubjectUpdateOne {
	csuo.mutation.ResetState()
	csuo.mutation.SetState(i)
	return csuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (csuo *CommentSubjectUpdateOne) SetNillableState(i *int8) *CommentSubjectUpdateOne {
	if i != nil {
		csuo.SetState(*i)
	}
	return csuo
}

// AddState adds i to the "state" field.
func (csuo *CommentSubjectUpdateOne) AddState(i int8) *CommentSubjectUpdateOne {
	csuo.mutation.AddState(i)
	return csuo
}

// SetCreatedAt sets the "created_at" field.
func (csuo *CommentSubjectUpdateOne) SetCreatedAt(t time.Time) *CommentSubjectUpdateOne {
	csuo.mutation.SetCreatedAt(t)
	return csuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csuo *CommentSubjectUpdateOne) SetNillableCreatedAt(t *time.Time) *CommentSubjectUpdateOne {
	if t != nil {
		csuo.SetCreatedAt(*t)
	}
	return csuo
}

// SetUpdatedAt sets the "updated_at" field.
func (csuo *CommentSubjectUpdateOne) SetUpdatedAt(t time.Time) *CommentSubjectUpdateOne {
	csuo.mutation.SetUpdatedAt(t)
	return csuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csuo *CommentSubjectUpdateOne) SetNillableUpdatedAt(t *time.Time) *CommentSubjectUpdateOne {
	if t != nil {
		csuo.SetUpdatedAt(*t)
	}
	return csuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (csuo *CommentSubjectUpdateOne) ClearUpdatedAt() *CommentSubjectUpdateOne {
	csuo.mutation.ClearUpdatedAt()
	return csuo
}

// Mutation returns the CommentSubjectMutation object of the builder.
func (csuo *CommentSubjectUpdateOne) Mutation() *CommentSubjectMutation {
	return csuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CommentSubjectUpdateOne) Select(field string, fields ...string) *CommentSubjectUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CommentSubject entity.
func (csuo *CommentSubjectUpdateOne) Save(ctx context.Context) (*CommentSubject, error) {
	var (
		err  error
		node *CommentSubject
	)
	if len(csuo.hooks) == 0 {
		node, err = csuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommentSubjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csuo.mutation = mutation
			node, err = csuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csuo.hooks) - 1; i >= 0; i-- {
			if csuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = csuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CommentSubjectUpdateOne) SaveX(ctx context.Context) *CommentSubject {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CommentSubjectUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CommentSubjectUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csuo *CommentSubjectUpdateOne) sqlSave(ctx context.Context) (_node *CommentSubject, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   commentsubject.Table,
			Columns: commentsubject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: commentsubject.FieldID,
			},
		},
	}
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CommentSubject.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commentsubject.FieldID)
		for _, f := range fields {
			if !commentsubject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commentsubject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentsubject.FieldOwnerID,
		})
	}
	if value, ok := csuo.mutation.AddedOwnerID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentsubject.FieldOwnerID,
		})
	}
	if value, ok := csuo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentsubject.FieldCount,
		})
	}
	if value, ok := csuo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentsubject.FieldCount,
		})
	}
	if value, ok := csuo.mutation.NextFloor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentsubject.FieldNextFloor,
		})
	}
	if value, ok := csuo.mutation.AddedNextFloor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentsubject.FieldNextFloor,
		})
	}
	if value, ok := csuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: commentsubject.FieldState,
		})
	}
	if value, ok := csuo.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: commentsubject.FieldState,
		})
	}
	if value, ok := csuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentsubject.FieldCreatedAt,
		})
	}
	if value, ok := csuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentsubject.FieldUpdatedAt,
		})
	}
	if csuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: commentsubject.FieldUpdatedAt,
		})
	}
	_node = &CommentSubject{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentsubject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
