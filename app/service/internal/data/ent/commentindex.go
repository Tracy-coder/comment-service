// Code generated by entc, DO NOT EDIT.

package ent

import (
	"comment/app/service/internal/data/ent/commentindex"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CommentIndex is the model entity for the CommentIndex schema.
type CommentIndex struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ContentID holds the value of the "content_id" field.
	ContentID int64 `json:"content_id,omitempty"`
	// ObjID holds the value of the "obj_id" field.
	// 作品id
	ObjID int64 `json:"obj_id,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	// 作者
	OwnerID int64 `json:"owner_id,omitempty"`
	// Root holds the value of the "root" field.
	// 根评论,为0表示该评论即为根评论
	Root int64 `json:"root,omitempty"`
	// Parent holds the value of the "parent" field.
	// 回复的是哪条评论,为0表示该评论即为根评论
	Parent int64 `json:"parent,omitempty"`
	// Floor holds the value of the "floor" field.
	// 该评论的楼层,根评论为0
	Floor int32 `json:"floor,omitempty"`
	// Like holds the value of the "like" field.
	// like
	Like int32 `json:"like,omitempty"`
	// Hate holds the value of the "hate" field.
	// hate
	Hate int32 `json:"hate,omitempty"`
	// State holds the value of the "state" field.
	// 状态,1为隐藏,0为正常
	State int8 `json:"state,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	// 修改时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// NextFloor holds the value of the "next_floor" field.
	// 主评论楼层才有,标识子评论的下一楼层
	NextFloor int32 `json:"next_floor,omitempty"`
	// Count holds the value of the "count" field.
	// 评论数
	Count int32 `json:"count,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommentIndex) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case commentindex.FieldID, commentindex.FieldContentID, commentindex.FieldObjID, commentindex.FieldOwnerID, commentindex.FieldRoot, commentindex.FieldParent, commentindex.FieldFloor, commentindex.FieldLike, commentindex.FieldHate, commentindex.FieldState, commentindex.FieldNextFloor, commentindex.FieldCount:
			values[i] = new(sql.NullInt64)
		case commentindex.FieldCreatedAt, commentindex.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CommentIndex", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommentIndex fields.
func (ci *CommentIndex) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commentindex.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ci.ID = int64(value.Int64)
		case commentindex.FieldContentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field content_id", values[i])
			} else if value.Valid {
				ci.ContentID = value.Int64
			}
		case commentindex.FieldObjID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field obj_id", values[i])
			} else if value.Valid {
				ci.ObjID = value.Int64
			}
		case commentindex.FieldOwnerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				ci.OwnerID = value.Int64
			}
		case commentindex.FieldRoot:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field root", values[i])
			} else if value.Valid {
				ci.Root = value.Int64
			}
		case commentindex.FieldParent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent", values[i])
			} else if value.Valid {
				ci.Parent = value.Int64
			}
		case commentindex.FieldFloor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field floor", values[i])
			} else if value.Valid {
				ci.Floor = int32(value.Int64)
			}
		case commentindex.FieldLike:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field like", values[i])
			} else if value.Valid {
				ci.Like = int32(value.Int64)
			}
		case commentindex.FieldHate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hate", values[i])
			} else if value.Valid {
				ci.Hate = int32(value.Int64)
			}
		case commentindex.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ci.State = int8(value.Int64)
			}
		case commentindex.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ci.CreatedAt = value.Time
			}
		case commentindex.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ci.UpdatedAt = value.Time
			}
		case commentindex.FieldNextFloor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field next_floor", values[i])
			} else if value.Valid {
				ci.NextFloor = int32(value.Int64)
			}
		case commentindex.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				ci.Count = int32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CommentIndex.
// Note that you need to call CommentIndex.Unwrap() before calling this method if this CommentIndex
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CommentIndex) Update() *CommentIndexUpdateOne {
	return (&CommentIndexClient{config: ci.config}).UpdateOne(ci)
}

// Unwrap unwraps the CommentIndex entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *CommentIndex) Unwrap() *CommentIndex {
	tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommentIndex is not a transactional entity")
	}
	ci.config.driver = tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CommentIndex) String() string {
	var builder strings.Builder
	builder.WriteString("CommentIndex(")
	builder.WriteString(fmt.Sprintf("id=%v", ci.ID))
	builder.WriteString(", content_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.ContentID))
	builder.WriteString(", obj_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.ObjID))
	builder.WriteString(", owner_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.OwnerID))
	builder.WriteString(", root=")
	builder.WriteString(fmt.Sprintf("%v", ci.Root))
	builder.WriteString(", parent=")
	builder.WriteString(fmt.Sprintf("%v", ci.Parent))
	builder.WriteString(", floor=")
	builder.WriteString(fmt.Sprintf("%v", ci.Floor))
	builder.WriteString(", like=")
	builder.WriteString(fmt.Sprintf("%v", ci.Like))
	builder.WriteString(", hate=")
	builder.WriteString(fmt.Sprintf("%v", ci.Hate))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", ci.State))
	builder.WriteString(", created_at=")
	builder.WriteString(ci.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ci.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", next_floor=")
	builder.WriteString(fmt.Sprintf("%v", ci.NextFloor))
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", ci.Count))
	builder.WriteByte(')')
	return builder.String()
}

// CommentIndexes is a parsable slice of CommentIndex.
type CommentIndexes []*CommentIndex

func (ci CommentIndexes) config(cfg config) {
	for _i := range ci {
		ci[_i].config = cfg
	}
}
