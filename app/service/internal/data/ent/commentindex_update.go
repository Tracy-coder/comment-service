// Code generated by entc, DO NOT EDIT.

package ent

import (
	"comment/app/service/internal/data/ent/commentindex"
	"comment/app/service/internal/data/ent/predicate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentIndexUpdate is the builder for updating CommentIndex entities.
type CommentIndexUpdate struct {
	config
	hooks    []Hook
	mutation *CommentIndexMutation
}

// Where appends a list predicates to the CommentIndexUpdate builder.
func (ciu *CommentIndexUpdate) Where(ps ...predicate.CommentIndex) *CommentIndexUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetContentID sets the "content_id" field.
func (ciu *CommentIndexUpdate) SetContentID(i int64) *CommentIndexUpdate {
	ciu.mutation.ResetContentID()
	ciu.mutation.SetContentID(i)
	return ciu
}

// AddContentID adds i to the "content_id" field.
func (ciu *CommentIndexUpdate) AddContentID(i int64) *CommentIndexUpdate {
	ciu.mutation.AddContentID(i)
	return ciu
}

// SetObjID sets the "obj_id" field.
func (ciu *CommentIndexUpdate) SetObjID(i int64) *CommentIndexUpdate {
	ciu.mutation.ResetObjID()
	ciu.mutation.SetObjID(i)
	return ciu
}

// AddObjID adds i to the "obj_id" field.
func (ciu *CommentIndexUpdate) AddObjID(i int64) *CommentIndexUpdate {
	ciu.mutation.AddObjID(i)
	return ciu
}

// SetOwnerID sets the "owner_id" field.
func (ciu *CommentIndexUpdate) SetOwnerID(i int64) *CommentIndexUpdate {
	ciu.mutation.ResetOwnerID()
	ciu.mutation.SetOwnerID(i)
	return ciu
}

// AddOwnerID adds i to the "owner_id" field.
func (ciu *CommentIndexUpdate) AddOwnerID(i int64) *CommentIndexUpdate {
	ciu.mutation.AddOwnerID(i)
	return ciu
}

// SetRoot sets the "root" field.
func (ciu *CommentIndexUpdate) SetRoot(i int64) *CommentIndexUpdate {
	ciu.mutation.ResetRoot()
	ciu.mutation.SetRoot(i)
	return ciu
}

// AddRoot adds i to the "root" field.
func (ciu *CommentIndexUpdate) AddRoot(i int64) *CommentIndexUpdate {
	ciu.mutation.AddRoot(i)
	return ciu
}

// SetParent sets the "parent" field.
func (ciu *CommentIndexUpdate) SetParent(i int64) *CommentIndexUpdate {
	ciu.mutation.ResetParent()
	ciu.mutation.SetParent(i)
	return ciu
}

// AddParent adds i to the "parent" field.
func (ciu *CommentIndexUpdate) AddParent(i int64) *CommentIndexUpdate {
	ciu.mutation.AddParent(i)
	return ciu
}

// SetFloor sets the "floor" field.
func (ciu *CommentIndexUpdate) SetFloor(i int32) *CommentIndexUpdate {
	ciu.mutation.ResetFloor()
	ciu.mutation.SetFloor(i)
	return ciu
}

// AddFloor adds i to the "floor" field.
func (ciu *CommentIndexUpdate) AddFloor(i int32) *CommentIndexUpdate {
	ciu.mutation.AddFloor(i)
	return ciu
}

// SetLike sets the "like" field.
func (ciu *CommentIndexUpdate) SetLike(i int32) *CommentIndexUpdate {
	ciu.mutation.ResetLike()
	ciu.mutation.SetLike(i)
	return ciu
}

// SetNillableLike sets the "like" field if the given value is not nil.
func (ciu *CommentIndexUpdate) SetNillableLike(i *int32) *CommentIndexUpdate {
	if i != nil {
		ciu.SetLike(*i)
	}
	return ciu
}

// AddLike adds i to the "like" field.
func (ciu *CommentIndexUpdate) AddLike(i int32) *CommentIndexUpdate {
	ciu.mutation.AddLike(i)
	return ciu
}

// SetHate sets the "hate" field.
func (ciu *CommentIndexUpdate) SetHate(i int32) *CommentIndexUpdate {
	ciu.mutation.ResetHate()
	ciu.mutation.SetHate(i)
	return ciu
}

// SetNillableHate sets the "hate" field if the given value is not nil.
func (ciu *CommentIndexUpdate) SetNillableHate(i *int32) *CommentIndexUpdate {
	if i != nil {
		ciu.SetHate(*i)
	}
	return ciu
}

// AddHate adds i to the "hate" field.
func (ciu *CommentIndexUpdate) AddHate(i int32) *CommentIndexUpdate {
	ciu.mutation.AddHate(i)
	return ciu
}

// SetState sets the "state" field.
func (ciu *CommentIndexUpdate) SetState(i int8) *CommentIndexUpdate {
	ciu.mutation.ResetState()
	ciu.mutation.SetState(i)
	return ciu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ciu *CommentIndexUpdate) SetNillableState(i *int8) *CommentIndexUpdate {
	if i != nil {
		ciu.SetState(*i)
	}
	return ciu
}

// AddState adds i to the "state" field.
func (ciu *CommentIndexUpdate) AddState(i int8) *CommentIndexUpdate {
	ciu.mutation.AddState(i)
	return ciu
}

// SetCreatedAt sets the "created_at" field.
func (ciu *CommentIndexUpdate) SetCreatedAt(t time.Time) *CommentIndexUpdate {
	ciu.mutation.SetCreatedAt(t)
	return ciu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ciu *CommentIndexUpdate) SetNillableCreatedAt(t *time.Time) *CommentIndexUpdate {
	if t != nil {
		ciu.SetCreatedAt(*t)
	}
	return ciu
}

// SetUpdatedAt sets the "updated_at" field.
func (ciu *CommentIndexUpdate) SetUpdatedAt(t time.Time) *CommentIndexUpdate {
	ciu.mutation.SetUpdatedAt(t)
	return ciu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ciu *CommentIndexUpdate) SetNillableUpdatedAt(t *time.Time) *CommentIndexUpdate {
	if t != nil {
		ciu.SetUpdatedAt(*t)
	}
	return ciu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ciu *CommentIndexUpdate) ClearUpdatedAt() *CommentIndexUpdate {
	ciu.mutation.ClearUpdatedAt()
	return ciu
}

// SetNextFloor sets the "next_floor" field.
func (ciu *CommentIndexUpdate) SetNextFloor(i int32) *CommentIndexUpdate {
	ciu.mutation.ResetNextFloor()
	ciu.mutation.SetNextFloor(i)
	return ciu
}

// SetNillableNextFloor sets the "next_floor" field if the given value is not nil.
func (ciu *CommentIndexUpdate) SetNillableNextFloor(i *int32) *CommentIndexUpdate {
	if i != nil {
		ciu.SetNextFloor(*i)
	}
	return ciu
}

// AddNextFloor adds i to the "next_floor" field.
func (ciu *CommentIndexUpdate) AddNextFloor(i int32) *CommentIndexUpdate {
	ciu.mutation.AddNextFloor(i)
	return ciu
}

// ClearNextFloor clears the value of the "next_floor" field.
func (ciu *CommentIndexUpdate) ClearNextFloor() *CommentIndexUpdate {
	ciu.mutation.ClearNextFloor()
	return ciu
}

// SetCount sets the "count" field.
func (ciu *CommentIndexUpdate) SetCount(i int32) *CommentIndexUpdate {
	ciu.mutation.ResetCount()
	ciu.mutation.SetCount(i)
	return ciu
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (ciu *CommentIndexUpdate) SetNillableCount(i *int32) *CommentIndexUpdate {
	if i != nil {
		ciu.SetCount(*i)
	}
	return ciu
}

// AddCount adds i to the "count" field.
func (ciu *CommentIndexUpdate) AddCount(i int32) *CommentIndexUpdate {
	ciu.mutation.AddCount(i)
	return ciu
}

// Mutation returns the CommentIndexMutation object of the builder.
func (ciu *CommentIndexUpdate) Mutation() *CommentIndexMutation {
	return ciu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *CommentIndexUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ciu.hooks) == 0 {
		affected, err = ciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommentIndexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ciu.mutation = mutation
			affected, err = ciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ciu.hooks) - 1; i >= 0; i-- {
			if ciu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CommentIndexUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CommentIndexUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CommentIndexUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciu *CommentIndexUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   commentindex.Table,
			Columns: commentindex.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: commentindex.FieldID,
			},
		},
	}
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.ContentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldContentID,
		})
	}
	if value, ok := ciu.mutation.AddedContentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldContentID,
		})
	}
	if value, ok := ciu.mutation.ObjID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldObjID,
		})
	}
	if value, ok := ciu.mutation.AddedObjID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldObjID,
		})
	}
	if value, ok := ciu.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldOwnerID,
		})
	}
	if value, ok := ciu.mutation.AddedOwnerID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldOwnerID,
		})
	}
	if value, ok := ciu.mutation.Root(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldRoot,
		})
	}
	if value, ok := ciu.mutation.AddedRoot(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldRoot,
		})
	}
	if value, ok := ciu.mutation.Parent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldParent,
		})
	}
	if value, ok := ciu.mutation.AddedParent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldParent,
		})
	}
	if value, ok := ciu.mutation.Floor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldFloor,
		})
	}
	if value, ok := ciu.mutation.AddedFloor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldFloor,
		})
	}
	if value, ok := ciu.mutation.Like(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldLike,
		})
	}
	if value, ok := ciu.mutation.AddedLike(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldLike,
		})
	}
	if value, ok := ciu.mutation.Hate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldHate,
		})
	}
	if value, ok := ciu.mutation.AddedHate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldHate,
		})
	}
	if value, ok := ciu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: commentindex.FieldState,
		})
	}
	if value, ok := ciu.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: commentindex.FieldState,
		})
	}
	if value, ok := ciu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentindex.FieldCreatedAt,
		})
	}
	if value, ok := ciu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentindex.FieldUpdatedAt,
		})
	}
	if ciu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: commentindex.FieldUpdatedAt,
		})
	}
	if value, ok := ciu.mutation.NextFloor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldNextFloor,
		})
	}
	if value, ok := ciu.mutation.AddedNextFloor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldNextFloor,
		})
	}
	if ciu.mutation.NextFloorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: commentindex.FieldNextFloor,
		})
	}
	if value, ok := ciu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldCount,
		})
	}
	if value, ok := ciu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldCount,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentindex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CommentIndexUpdateOne is the builder for updating a single CommentIndex entity.
type CommentIndexUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentIndexMutation
}

// SetContentID sets the "content_id" field.
func (ciuo *CommentIndexUpdateOne) SetContentID(i int64) *CommentIndexUpdateOne {
	ciuo.mutation.ResetContentID()
	ciuo.mutation.SetContentID(i)
	return ciuo
}

// AddContentID adds i to the "content_id" field.
func (ciuo *CommentIndexUpdateOne) AddContentID(i int64) *CommentIndexUpdateOne {
	ciuo.mutation.AddContentID(i)
	return ciuo
}

// SetObjID sets the "obj_id" field.
func (ciuo *CommentIndexUpdateOne) SetObjID(i int64) *CommentIndexUpdateOne {
	ciuo.mutation.ResetObjID()
	ciuo.mutation.SetObjID(i)
	return ciuo
}

// AddObjID adds i to the "obj_id" field.
func (ciuo *CommentIndexUpdateOne) AddObjID(i int64) *CommentIndexUpdateOne {
	ciuo.mutation.AddObjID(i)
	return ciuo
}

// SetOwnerID sets the "owner_id" field.
func (ciuo *CommentIndexUpdateOne) SetOwnerID(i int64) *CommentIndexUpdateOne {
	ciuo.mutation.ResetOwnerID()
	ciuo.mutation.SetOwnerID(i)
	return ciuo
}

// AddOwnerID adds i to the "owner_id" field.
func (ciuo *CommentIndexUpdateOne) AddOwnerID(i int64) *CommentIndexUpdateOne {
	ciuo.mutation.AddOwnerID(i)
	return ciuo
}

// SetRoot sets the "root" field.
func (ciuo *CommentIndexUpdateOne) SetRoot(i int64) *CommentIndexUpdateOne {
	ciuo.mutation.ResetRoot()
	ciuo.mutation.SetRoot(i)
	return ciuo
}

// AddRoot adds i to the "root" field.
func (ciuo *CommentIndexUpdateOne) AddRoot(i int64) *CommentIndexUpdateOne {
	ciuo.mutation.AddRoot(i)
	return ciuo
}

// SetParent sets the "parent" field.
func (ciuo *CommentIndexUpdateOne) SetParent(i int64) *CommentIndexUpdateOne {
	ciuo.mutation.ResetParent()
	ciuo.mutation.SetParent(i)
	return ciuo
}

// AddParent adds i to the "parent" field.
func (ciuo *CommentIndexUpdateOne) AddParent(i int64) *CommentIndexUpdateOne {
	ciuo.mutation.AddParent(i)
	return ciuo
}

// SetFloor sets the "floor" field.
func (ciuo *CommentIndexUpdateOne) SetFloor(i int32) *CommentIndexUpdateOne {
	ciuo.mutation.ResetFloor()
	ciuo.mutation.SetFloor(i)
	return ciuo
}

// AddFloor adds i to the "floor" field.
func (ciuo *CommentIndexUpdateOne) AddFloor(i int32) *CommentIndexUpdateOne {
	ciuo.mutation.AddFloor(i)
	return ciuo
}

// SetLike sets the "like" field.
func (ciuo *CommentIndexUpdateOne) SetLike(i int32) *CommentIndexUpdateOne {
	ciuo.mutation.ResetLike()
	ciuo.mutation.SetLike(i)
	return ciuo
}

// SetNillableLike sets the "like" field if the given value is not nil.
func (ciuo *CommentIndexUpdateOne) SetNillableLike(i *int32) *CommentIndexUpdateOne {
	if i != nil {
		ciuo.SetLike(*i)
	}
	return ciuo
}

// AddLike adds i to the "like" field.
func (ciuo *CommentIndexUpdateOne) AddLike(i int32) *CommentIndexUpdateOne {
	ciuo.mutation.AddLike(i)
	return ciuo
}

// SetHate sets the "hate" field.
func (ciuo *CommentIndexUpdateOne) SetHate(i int32) *CommentIndexUpdateOne {
	ciuo.mutation.ResetHate()
	ciuo.mutation.SetHate(i)
	return ciuo
}

// SetNillableHate sets the "hate" field if the given value is not nil.
func (ciuo *CommentIndexUpdateOne) SetNillableHate(i *int32) *CommentIndexUpdateOne {
	if i != nil {
		ciuo.SetHate(*i)
	}
	return ciuo
}

// AddHate adds i to the "hate" field.
func (ciuo *CommentIndexUpdateOne) AddHate(i int32) *CommentIndexUpdateOne {
	ciuo.mutation.AddHate(i)
	return ciuo
}

// SetState sets the "state" field.
func (ciuo *CommentIndexUpdateOne) SetState(i int8) *CommentIndexUpdateOne {
	ciuo.mutation.ResetState()
	ciuo.mutation.SetState(i)
	return ciuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ciuo *CommentIndexUpdateOne) SetNillableState(i *int8) *CommentIndexUpdateOne {
	if i != nil {
		ciuo.SetState(*i)
	}
	return ciuo
}

// AddState adds i to the "state" field.
func (ciuo *CommentIndexUpdateOne) AddState(i int8) *CommentIndexUpdateOne {
	ciuo.mutation.AddState(i)
	return ciuo
}

// SetCreatedAt sets the "created_at" field.
func (ciuo *CommentIndexUpdateOne) SetCreatedAt(t time.Time) *CommentIndexUpdateOne {
	ciuo.mutation.SetCreatedAt(t)
	return ciuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ciuo *CommentIndexUpdateOne) SetNillableCreatedAt(t *time.Time) *CommentIndexUpdateOne {
	if t != nil {
		ciuo.SetCreatedAt(*t)
	}
	return ciuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ciuo *CommentIndexUpdateOne) SetUpdatedAt(t time.Time) *CommentIndexUpdateOne {
	ciuo.mutation.SetUpdatedAt(t)
	return ciuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ciuo *CommentIndexUpdateOne) SetNillableUpdatedAt(t *time.Time) *CommentIndexUpdateOne {
	if t != nil {
		ciuo.SetUpdatedAt(*t)
	}
	return ciuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ciuo *CommentIndexUpdateOne) ClearUpdatedAt() *CommentIndexUpdateOne {
	ciuo.mutation.ClearUpdatedAt()
	return ciuo
}

// SetNextFloor sets the "next_floor" field.
func (ciuo *CommentIndexUpdateOne) SetNextFloor(i int32) *CommentIndexUpdateOne {
	ciuo.mutation.ResetNextFloor()
	ciuo.mutation.SetNextFloor(i)
	return ciuo
}

// SetNillableNextFloor sets the "next_floor" field if the given value is not nil.
func (ciuo *CommentIndexUpdateOne) SetNillableNextFloor(i *int32) *CommentIndexUpdateOne {
	if i != nil {
		ciuo.SetNextFloor(*i)
	}
	return ciuo
}

// AddNextFloor adds i to the "next_floor" field.
func (ciuo *CommentIndexUpdateOne) AddNextFloor(i int32) *CommentIndexUpdateOne {
	ciuo.mutation.AddNextFloor(i)
	return ciuo
}

// ClearNextFloor clears the value of the "next_floor" field.
func (ciuo *CommentIndexUpdateOne) ClearNextFloor() *CommentIndexUpdateOne {
	ciuo.mutation.ClearNextFloor()
	return ciuo
}

// SetCount sets the "count" field.
func (ciuo *CommentIndexUpdateOne) SetCount(i int32) *CommentIndexUpdateOne {
	ciuo.mutation.ResetCount()
	ciuo.mutation.SetCount(i)
	return ciuo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (ciuo *CommentIndexUpdateOne) SetNillableCount(i *int32) *CommentIndexUpdateOne {
	if i != nil {
		ciuo.SetCount(*i)
	}
	return ciuo
}

// AddCount adds i to the "count" field.
func (ciuo *CommentIndexUpdateOne) AddCount(i int32) *CommentIndexUpdateOne {
	ciuo.mutation.AddCount(i)
	return ciuo
}

// Mutation returns the CommentIndexMutation object of the builder.
func (ciuo *CommentIndexUpdateOne) Mutation() *CommentIndexMutation {
	return ciuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *CommentIndexUpdateOne) Select(field string, fields ...string) *CommentIndexUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated CommentIndex entity.
func (ciuo *CommentIndexUpdateOne) Save(ctx context.Context) (*CommentIndex, error) {
	var (
		err  error
		node *CommentIndex
	)
	if len(ciuo.hooks) == 0 {
		node, err = ciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommentIndexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ciuo.mutation = mutation
			node, err = ciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ciuo.hooks) - 1; i >= 0; i-- {
			if ciuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ciuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CommentIndexUpdateOne) SaveX(ctx context.Context) *CommentIndex {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *CommentIndexUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CommentIndexUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciuo *CommentIndexUpdateOne) sqlSave(ctx context.Context) (_node *CommentIndex, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   commentindex.Table,
			Columns: commentindex.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: commentindex.FieldID,
			},
		},
	}
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CommentIndex.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commentindex.FieldID)
		for _, f := range fields {
			if !commentindex.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commentindex.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.ContentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldContentID,
		})
	}
	if value, ok := ciuo.mutation.AddedContentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldContentID,
		})
	}
	if value, ok := ciuo.mutation.ObjID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldObjID,
		})
	}
	if value, ok := ciuo.mutation.AddedObjID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldObjID,
		})
	}
	if value, ok := ciuo.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldOwnerID,
		})
	}
	if value, ok := ciuo.mutation.AddedOwnerID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldOwnerID,
		})
	}
	if value, ok := ciuo.mutation.Root(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldRoot,
		})
	}
	if value, ok := ciuo.mutation.AddedRoot(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldRoot,
		})
	}
	if value, ok := ciuo.mutation.Parent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldParent,
		})
	}
	if value, ok := ciuo.mutation.AddedParent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: commentindex.FieldParent,
		})
	}
	if value, ok := ciuo.mutation.Floor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldFloor,
		})
	}
	if value, ok := ciuo.mutation.AddedFloor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldFloor,
		})
	}
	if value, ok := ciuo.mutation.Like(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldLike,
		})
	}
	if value, ok := ciuo.mutation.AddedLike(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldLike,
		})
	}
	if value, ok := ciuo.mutation.Hate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldHate,
		})
	}
	if value, ok := ciuo.mutation.AddedHate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldHate,
		})
	}
	if value, ok := ciuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: commentindex.FieldState,
		})
	}
	if value, ok := ciuo.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: commentindex.FieldState,
		})
	}
	if value, ok := ciuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentindex.FieldCreatedAt,
		})
	}
	if value, ok := ciuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commentindex.FieldUpdatedAt,
		})
	}
	if ciuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: commentindex.FieldUpdatedAt,
		})
	}
	if value, ok := ciuo.mutation.NextFloor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldNextFloor,
		})
	}
	if value, ok := ciuo.mutation.AddedNextFloor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldNextFloor,
		})
	}
	if ciuo.mutation.NextFloorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: commentindex.FieldNextFloor,
		})
	}
	if value, ok := ciuo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldCount,
		})
	}
	if value, ok := ciuo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: commentindex.FieldCount,
		})
	}
	_node = &CommentIndex{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentindex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
